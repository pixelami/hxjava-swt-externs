package org.eclipse.swt.widgets;

import java.StdTypes;
@:native("org.eclipse.swt.widgets.Event")
/**
 * Instances of this class provide a description of a particular
 * event which occurred within SWT. The SWT <em>untyped listener</em>
 * API uses these instances for all event dispatching.
 * <p>
 * Note: For a given event, only the fields which are appropriate
 * will be filled in. The contents of the fields which are not used
 * by the event are unspecified.
 * </p>
 * 
 * @see Listener
 * @see org.eclipse.swt.events.TypedEvent
 * @see <a href="http://www.eclipse.org/swt/examples.php">SWT Example: ControlExample, Listeners</a>
 * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
 */
extern class Event 
{
/**
 * the display where the event occurred
 * 
 * @since 2.0 
 */
	public var display:org.eclipse.swt.widgets.Display;
/**  the widget that issued the event */
	public var widget:org.eclipse.swt.widgets.Widget;
/**
 * the type of event, as defined by the event type constants
 * in class <code>SWT</code>
 *
 * @see org.eclipse.swt.SWT
 */
	public var type:Int;
/**
 * the event specific detail field, as defined by the detail constants
 * in class <code>SWT</code>
 * 
 * @see org.eclipse.swt.SWT
 */
	public var detail:Int;
/**  the item that the event occurred in (can be null) */
	public var item:org.eclipse.swt.widgets.Widget;
/**
 * the index of the item where the event occurred
 * 
 * @since 3.2
 */
	public var index:Int;
/**
 * the graphics context to use when painting
 * that is configured to use the colors, font and
 * damaged region of the control.  It is valid
 * only during the paint and must not be disposed
 */
	public var gc:org.eclipse.swt.graphics.GC;
/**
 * depending on the event type, the x offset of the bounding
 * rectangle of the region that requires painting or the
 * widget-relative, x coordinate of the pointer at the
 * time the mouse button was pressed or released
 */
	public var x:Int;
/**
 * depending on the event type, the y offset of the bounding
 * rectangle of the  region that requires painting or the
 * widget-relative, y coordinate of the pointer at the
 * time the mouse button was pressed or released
 */
	public var y:Int;
/**
 * the width of the bounding rectangle of the 
 * region that requires painting
 */
	public var width:Int;
/**
 * the height of the bounding rectangle of the 
 * region that requires painting
 */
	public var height:Int;
/**
 * depending on the event type, the number of following
 * paint events that are pending which may always be zero
 * on some platforms, or the number of lines or pages to
 * scroll using the mouse wheel, or the number of times the
 * mouse has been clicked
 */
	public var count:Int;
/**
 * the time that the event occurred.
 * 
 * NOTE: This field is an unsigned integer and should
 * be AND'ed with 0xFFFFFFFFL so that it can be treated
 * as a signed long.
 */
	public var time:Int;
/**
 * the button that was pressed or released; 1 for the
 * first button, 2 for the second button, and 3 for the
 * third button, etc.
 */
	public var button:Int;
/**
 * depending on the event, the character represented by the key
 * that was typed.  This is the final character that results
 * after all modifiers have been applied.  For example, when the
 * user types Ctrl+A, the character value is 0x01 (ASCII SOH).
 * It is important that applications do not attempt to modify the
 * character value based on a stateMask (such as SWT.CTRL) or the
 * resulting character will not be correct.
 */
	public var character:Char16;
/**
 * depending on the event, the key code of the key that was typed,
 * as defined by the key code constants in class <code>SWT</code>.
 * When the character field of the event is ambiguous, this field
 * contains the unaffected value of the original character.  For
 * example, typing Ctrl+M or Enter both result in the character '\r'
 * but the keyCode field will also contain '\r' when Enter was typed
 * and 'm' when Ctrl+M was typed.
 * 
 * @see org.eclipse.swt.SWT
 */
	public var keyCode:Int;
/**
 * depending on the event, the location of key specified by the 
 * keyCode or character. The possible values for this field are 
 * <code>SWT.LEFT</code>, <code>SWT.RIGHT</code>, <code>SWT.KEYPAD</code>,
 * or <code>SWT.NONE</code> representing the main keyboard area.
 * <p>
 * The location field can be used to differentiate key events that have 
 * the same key code and character but are generated by different keys 
 * in the keyboard. For example, a key down event with the key code equals
 * to SWT.SHIFT can be generated by the left and the right shift keys in the 
 * keyboard. The location field can only be used to determine the location 
 * of the key code or character in the current event. It does not 
 * include information about the location of modifiers in state
 * mask.
 * </p>
 * 
 * @see org.eclipse.swt.SWT#LEFT
 * @see org.eclipse.swt.SWT#RIGHT
 * @see org.eclipse.swt.SWT#KEYPAD
 * 
 * @since 3.6
 */
	public var keyLocation:Int;
/**
 * depending on the event, the state of the keyboard modifier
 * keys and mouse masks at the time the event was generated.
 * 
 * @see org.eclipse.swt.SWT#MODIFIER_MASK
 * @see org.eclipse.swt.SWT#BUTTON_MASK
 */
	public var stateMask:Int;
/**
 * depending on the event, the range of text being modified.
 * Setting these fields only has effect during ImeComposition 
 * events.
 */
	public var start:Int;
/**
 * depending on the event, the range of text being modified.
 * Setting these fields only has effect during ImeComposition 
 * events.
 */
	public var end:Int;
/**
 * depending on the event, the new text that will be inserted.
 * Setting this field will change the text that is about to
 * be inserted or deleted.
 */
	public var text:String;
/**
 *
 * Bidi segment offsets
 * @since 3.8
 */
	public var segments:java.NativeArray<Int>;
/**
 *
 * Characters to be applied on the segment boundaries
 * @since 3.8
 */
	public var segmentsChars:java.NativeArray<Char16>;
/**
 * depending on the event, a flag indicating whether the operation
 * should be allowed.  Setting this field to false will cancel the
 * operation.
 */
	public var doit:Bool;
/**  a field for application use */
	public var data:Dynamic;
/**
 * An array of the touch states for the current touch event.
 *
 * @since 3.7
 */
	public var touches:java.NativeArray<org.eclipse.swt.widgets.Touch>;
/**
 * If nonzero, a positive value indicates a swipe to the right,
 * and a negative value indicates a swipe to the left.
 *
 * @since 3.7
 */
	public var xDirection:Int;
/**
 * If nonzero, a positive value indicates a swipe in the up direction,
 * and a negative value indicates a swipe in the down direction.
 *
 * @since 3.7
 */
	public var yDirection:Int;
/**
 * The change in magnification. This value should be added to the current 
 * scaling of an item to get the new scale factor.
 *
 * @since 3.7
 */
	public var magnification:Float;
/**
 * The number of degrees rotated on the track pad.
 *
 * @since 3.7
 */
	public var rotation:Float;
	public function new():Void;
/**
 * Gets the bounds.
 * 
 * @return a rectangle that is the bounds.
 */
	public function getBounds():org.eclipse.swt.graphics.Rectangle;
/**
 * Returns a string containing a concise, human-readable
 * description of the receiver.
 *
 * @return a string representation of the event
 */
	public function toString():String;
/**
 * Sets the bounds.
 * 
 * @param rect the new rectangle
 */
	public function setBounds(rect:org.eclipse.swt.graphics.Rectangle):Void;

}
