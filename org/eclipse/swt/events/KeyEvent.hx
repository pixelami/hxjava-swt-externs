package org.eclipse.swt.events;

import java.StdTypes;
@:native("org.eclipse.swt.events.KeyEvent")
/**
 * Instances of this class are sent as a result of
 * keys being pressed and released on the keyboard.
 * <p>
 * When a key listener is added to a control, the control
 * will take part in widget traversal.  By default, all
 * traversal keys (such as the tab key and so on) are
 * delivered to the control.  In order for a control to take
 * part in traversal, it should listen for traversal events.
 * Otherwise, the user can traverse into a control but not
 * out.  Note that native controls such as table and tree
 * implement key traversal in the operating system.  It is
 * not necessary to add traversal listeners for these controls,
 * unless you want to override the default traversal.
 * </p>
 *
 * @see KeyListener
 * @see TraverseListener
 * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
 */
extern class KeyEvent extends org.eclipse.swt.events.TypedEvent 
{
/**
 * the character represented by the key that was typed.  
 * This is the final character that results after all modifiers have been
 * applied.  For example, when the user types Ctrl+A, the character value
 * is 0x01.  It is important that applications do not attempt to modify the
 * character value based on a stateMask (such as SWT.CTRL) or the resulting
 * character will not be correct.
 */
	public var character:Char16;
/**
 * the key code of the key that was typed,
 * as defined by the key code constants in class <code>SWT</code>.
 * When the character field of the event is ambiguous, this field
 * contains the unicode value of the original character.  For example,
 * typing Ctrl+M or Return both result in the character '\r' but the
 * keyCode field will also contain '\r' when Return was typed.
 * 
 * @see org.eclipse.swt.SWT
 */
	public var keyCode:Int;
/**
 * depending on the event, the location of key specified by the
 * keyCode or character. The possible values for this field are
 * <code>SWT.LEFT</code>, <code>SWT.RIGHT</code>, <code>SWT.KEYPAD</code>,
 * or <code>SWT.NONE</code> representing the main keyboard area.
 * <p>
 * The location field can be used to differentiate key events that have
 * the same key code and character but are generated by different keys
 * on the keyboard. For example, a key down event with the key code equal
 * to SWT.SHIFT can be generated by the left and the right shift keys on
 * the keyboard.
 * </p><p>
 * The location field can only be used to determine the location of
 * the key code or character in the current event. It does not include
 * information about the location of modifiers in the state mask.
 * </p>
 * 
 * @see org.eclipse.swt.SWT#LEFT
 * @see org.eclipse.swt.SWT#RIGHT
 * @see org.eclipse.swt.SWT#KEYPAD
 * 
 * @since 3.6
 */
	public var keyLocation:Int;
/**
 * the state of the keyboard modifier keys and mouse masks
 * at the time the event was generated.
 * 
 * @see org.eclipse.swt.SWT#MODIFIER_MASK
 * @see org.eclipse.swt.SWT#BUTTON_MASK
 */
	public var stateMask:Int;
/**
 * A flag indicating whether the operation should be allowed.
 * Setting this field to <code>false</code> will cancel the operation.
 */
	public var doit:Bool;
/**
 * Constructs a new instance of this class based on the
 * information in the given untyped event.
 *
 * @param e the untyped event containing the information
 */
	public function new(e:org.eclipse.swt.widgets.Event):Void;
/**
 * Returns a string containing a concise, human-readable
 * description of the receiver.
 *
 * @return a string representation of the event
 */
	override public function toString():String;

}
